// Generated by LiveScript 1.3.1
var ldForm;
ldForm = function(opt){
  var root, fields, status, check, k, v, this$ = this;
  opt == null && (opt = {});
  this.opt = opt;
  this.root = root = typeof opt.root === 'string'
    ? ld$.find(document, opt.root, 0)
    : opt.root;
  this.fields = fields = {};
  this.status = status = {
    all: 1
  };
  ['debounce', 'verify', 'names', 'getFields', 'afterCheck'].map(function(n){
    if (opt[n]) {
      return this$[n] = opt[n];
    }
  });
  check = function(e){
    return this$.check(e && e.target ? e.target.getAttribute('name') : undefined, e);
  };
  this.fields = fields = this.getFields(root);
  for (k in fields) {
    v = fields[k];
    v.addEventListener('change', check);
    v.addEventListener('keyup', check);
    status[k] = 1;
  }
  if (opt.init) {
    opt.init.apply(this);
  }
  return this;
};
ldForm.prototype = import$(Object.create(Object.prototype), {
  ready: function(){
    return this.status.all === 0;
  },
  verify: function(n, v, e){
    return v ? 0 : 2;
  },
  names: function(){
    var k, results$ = [];
    for (k in this.fields) {
      results$.push(k);
    }
    return results$;
  },
  debounce: function(){
    return true;
  },
  afterCheck: function(){},
  values: function(){
    var ret, k, ref$, v;
    ret = {};
    for (k in ref$ = this.fields) {
      v = ref$[k];
      ret[k] = v.getAttribute('type') === 'checkbox'
        ? v.checked
        : v.value;
    }
    return ret;
  },
  getFields: function(root){
    var ret;
    ret = {};
    ld$.find(this.root, '[name]').map(function(f){
      return ret[f.getAttribute('name')] = f;
    });
    return ret;
  },
  checkDebounced: debounce(function(e, n, fs, s, res, rej){
    var names, len;
    names = this.names(s);
    this.afterCheck(s, fs);
    len = names.map(function(n){
      return s[n] != null && s[n] === 0;
    }).filter(function(it){
      return !it;
    }).length;
    s.all = !len ? 0 : 1;
    names.map(function(n){
      var x$;
      x$ = fs[n].classList;
      x$.toggle('is-invalid', s[n] === 2);
      x$.toggle('is-valid', s[n] < 1);
      return x$;
    });
    return res();
  }),
  check: function(n, e){
    var this$ = this;
    return new Promise(function(res, rej){
      var ref$, fs, s;
      if (n != null && !this$.fields[n]) {
        return rej(new Error("ldForm.check: field " + n + " not found."));
      }
      ref$ = [this$.fields, this$.status], fs = ref$[0], s = ref$[1];
      if (fs[n]) {
        s[n] = this$.verify(n, fs[n].value, fs[n]);
      }
      if (this$.debounce(n, s)) {
        return this$.checkDebounced(e, n, fs, s, res, rej);
      } else {
        return this$.checkDebounced.now(e, n, fs, s, res, rej);
      }
    });
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
